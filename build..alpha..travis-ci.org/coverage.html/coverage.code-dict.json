{"/home/travis/build/npmtest/node-npmtest-sequelize-cli/test.js":"/* istanbul instrument in package npmtest_sequelize_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/lib.npmtest_sequelize_cli.js":"/* istanbul instrument in package npmtest_sequelize_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sequelize_cli = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sequelize_cli = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sequelize-cli && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sequelize_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sequelize_cli\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sequelize_cli.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sequelize_cli.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sequelize_cli.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sequelize_cli.__dirname + '/lib.npmtest_sequelize_cli.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/gulpfile.js":"'use strict';\n\nvar args        = require('yargs').argv;\nvar gulp        = require('gulp');\nvar jscs        = require('gulp-jscs');\nvar jshint      = require('gulp-jshint');\nvar mocha       = require('gulp-mocha');\nvar path        = require('path');\nvar runSequence = require('run-sequence');\n\ngulp.task('default', function (done) {\n  runSequence('lint', 'test', done);\n});\n\ngulp.task('test', function (done) {\n  runSequence('test-unit', 'test-integration', done);\n});\n\ngulp.task('lint', function (done) {\n  runSequence('lint-code', done);\n});\n\ngulp.task('lint-code', function () {\n  return gulp\n    .src([\n      './gulpfile.js',\n      './index.js',\n      './bin/**/*',\n      './lib/**/*.js',\n      '!./lib/assets/**/*.js',\n      './test/**/*.js',\n      '!./test/support/tmp/**/*.js'\n    ])\n    .pipe(jscs())\n    .pipe(jshint())\n    .pipe(jshint.reporter('default'))\n    .pipe(jshint.reporter('fail'));\n});\n\ngulp.task('test-unit', function () {\n  // TODO\n});\n\ngulp.task('test-integration', function () {\n  gulp\n    .src(path.resolve(__dirname, 'test', '**', '*.test.js'), { read: false })\n    .pipe(mocha({\n      reporter:    'spec',\n      ignoreLeaks: true,\n      timeout:     30000,\n      grep:        args.grep\n    }));\n});\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/lib/gulpfile.js":"'use strict';\n\nvar gulp    = require('gulp');\nvar path    = require('path');\nvar fs      = require('fs');\nvar helpers = require(path.resolve(__dirname, 'helpers'));\n\nrequire('gulp-help')(gulp, {\n  aliases: ['h'],\n  afterPrintCallback: helpers.gulp.printManuals\n});\n\nfs\n  .readdirSync(path.resolve(__dirname, 'tasks'))\n  .filter(function (file) {\n    return (file.indexOf('.') !== 0);\n  })\n  .map(function (file) {\n    return require(path.resolve(__dirname, 'tasks', file));\n  })\n  .forEach(function (tasks) {\n    Object.keys(tasks).forEach(function (taskName) {\n      helpers.gulp.addTask(gulp, taskName, tasks[taskName]);\n      helpers.gulp.addHelp(gulp, taskName, tasks[taskName]);\n    });\n  });\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/lib/helpers/index.js":"'use strict';\n\nvar path = require('path');\nvar fs   = require('fs');\n\nmodule.exports = {};\n\nfs\n  .readdirSync(__dirname)\n  .filter(function (file) {\n    return (file.indexOf('.') !== 0) && (file.indexOf('index.js') === -1);\n  })\n  .forEach(function (file) {\n    module.exports[file.replace('-helper.js', '')] = require(path.resolve(__dirname, file));\n  });\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/lib/helpers/asset-helper.js":"'use strict';\n\nvar fs   = require('fs-extra');\nvar path = require('path');\n\nmodule.exports = {\n  copy: function (from, to) {\n    fs.copySync(path.resolve(__dirname, '..', 'assets', from), to);\n  },\n\n  read: function (assetPath) {\n    return fs.readFileSync(path.resolve(__dirname, '..', 'assets', assetPath)).toString();\n  },\n\n  write: function (targetPath, content) {\n    fs.writeFileSync(targetPath, content);\n  },\n\n  inject: function (filePath, token, content) {\n    var fileContent = fs.readFileSync(filePath).toString();\n\n    fs.writeFileSync(filePath, fileContent.replace(token, content));\n  },\n\n  injectConfigFilePath: function (filePath, configPath) {\n    this.inject(filePath, '__CONFIG_FILE__', configPath);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/lib/helpers/config-helper.js":"'use strict';\n\nvar args     = require('yargs').argv;\nvar Bluebird = require('bluebird');\nvar path     = require('path');\nvar fs       = require('fs');\nvar helpers  = require(__dirname);\nvar url      = require('url');\nvar _        = require('lodash');\n\nvar api = {\n  config: undefined,\n  rawConfig: undefined,\n  error: undefined,\n  init: function () {\n    return Bluebird.resolve()\n      .then(function () {\n        var config;\n\n        if (args.url) {\n          config = api.parseDbUrl(args.url);\n        } else {\n          try {\n            config = require(api.getConfigFile());\n          } catch (e) {\n            api.error = e;\n          }\n        }\n        return config;\n      })\n      .then(function (config) {\n        if (typeof config === 'object' || config === undefined) {\n          return config;\n        } else if (config.length === 1) {\n          return Bluebird.promisify(config)();\n        } else {\n          return config();\n        }\n      })\n      .then(function (config) {\n        api.rawConfig = config;\n      })\n      .then(function () {\n        // Always return the full config api\n        return api;\n      });\n  },\n  getConfigFile: function () {\n    if (args.config) {\n      return path.resolve(process.cwd(), args.config);\n    }\n\n    var defaultPath = path.resolve(process.cwd(), 'config', 'config.json');\n    var alternativePath = defaultPath.replace('.json', '.js');\n\n    return helpers.path.existsSync(alternativePath) ? alternativePath : defaultPath;\n  },\n\n  relativeConfigFile: function () {\n    return path.relative(process.cwd(), api.getConfigFile());\n  },\n\n  configFileExists: function () {\n    return helpers.path.existsSync(api.getConfigFile());\n  },\n\n  getDefaultConfig: function () {\n    return JSON.stringify({\n      development: {\n        username: 'root',\n        password: null,\n        database: 'database_development',\n        host: '127.0.0.1',\n        dialect: 'mysql'\n      },\n      test: {\n        username: 'root',\n        password: null,\n        database: 'database_test',\n        host: '127.0.0.1',\n        dialect: 'mysql'\n      },\n      production: {\n        username: 'root',\n        password: null,\n        database: 'database_production',\n        host: '127.0.0.1',\n        dialect: 'mysql'\n      }\n    }, undefined, 2) + '\\n';\n  },\n\n  writeDefaultConfig: function () {\n    var configPath = path.dirname(api.getConfigFile());\n\n    if (!helpers.path.existsSync(configPath)) {\n      fs.mkdirSync(configPath);\n    }\n\n    fs.writeFileSync(api.getConfigFile(), api.getDefaultConfig());\n  },\n\n  readConfig: function () {\n    if (!api.config) {\n      var env = helpers.generic.getEnvironment();\n\n      if (api.rawConfig === undefined) {\n        throw new Error(\n          'Error reading \"' +\n            api.relativeConfigFile() +\n            '\". Error: ' + api.error\n        );\n      }\n\n      if (typeof api.rawConfig !== 'object') {\n        throw new Error(\n          'Config must be an object or a promise for an object: ' +\n            api.relativeConfigFile()\n        );\n      }\n\n      if (args.url) {\n        console.log('Parsed url ' + api.filteredUrl(args.url, api.rawConfig));\n      } else {\n        console.log('Loaded configuration file \"' + api.relativeConfigFile() + '\".');\n      }\n\n      if (api.rawConfig[env]) {\n        console.log('Using environment \"' + env + '\".');\n\n        // The Sequelize library needs a function passed in to its logging option\n        if (api.rawConfig.logging && !_.isFunction(api.rawConfig.logging)) {\n          api.rawConfig.logging = console.log;\n        }\n\n        api.rawConfig = api.rawConfig[env];\n      }\n\n      // in case url is present - we overwrite the configuration\n      if (api.rawConfig.url) {\n        api.rawConfig = _.merge(api.rawConfig, api.parseDbUrl(api.rawConfig.url));\n      }\n\n      api.config = api.rawConfig;\n    }\n    return api.config;\n  },\n\n  filteredUrl: function (url, config) {\n    var regExp = new RegExp(':?' + (config.password || '') + '@');\n\n    return url.replace(regExp, ':*****@');\n  },\n\n  supportsCoffee: function (options) {\n    var config = null;\n\n    options = _.assign({\n      ignoreConfig: true\n    }, options || {});\n\n    try {\n      config = api.readConfig();\n    } catch (e) {\n      if (options.ignoreConfig) {\n        config = {};\n      } else {\n        throw e;\n      }\n    }\n\n    return args.coffee || config.coffee;\n  },\n\n  urlStringToConfigHash: function (urlString) {\n    try {\n      var urlParts = url.parse(urlString);\n      var result   = {\n        database: urlParts.path.replace(/^\\//,  ''),\n        dialect:  urlParts.protocol,\n        host:     urlParts.hostname,\n        port:     urlParts.port\n      };\n\n      if (urlParts.auth) {\n        result = _.assign(result, {\n          username: urlParts.auth.split(':')[0],\n          password: urlParts.auth.split(':')[1]\n        });\n      }\n\n      return result;\n    } catch (e) {\n      throw new Error('Error parsing url: ' + urlString);\n    }\n  },\n\n  parseDbUrl: function (urlString) {\n    var config = api.urlStringToConfigHash(urlString);\n\n    config = _.assign(config, {\n      dialect: config.dialect.replace(/:$/, '')\n    });\n\n    if (config.dialect === 'sqlite') {\n      config = _.assign(config, {\n        storage: '/' + config.database\n      });\n    }\n\n    return config;\n  }\n};\n\nmodule.exports = api;\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/lib/helpers/generic-helper.js":"'use strict';\n\nvar fs   = require('fs');\nvar args = require('yargs').argv;\nvar path = require('path');\nvar resolve = require('resolve').sync;\n\nmodule.exports = {\n  mkdirp: function (path, root) {\n    var dirs = path.split('/');\n    var dir  = dirs.shift();\n\n    root = (root || '') + dir + '/';\n\n    try {\n      fs.mkdirSync(root);\n    } catch (e) {\n      // dir wasn't made, something went wrong\n      if (!fs.statSync(root).isDirectory()) {\n        throw new Error(e);\n      }\n    }\n\n    return !dirs.length || this.mkdirp(dirs.join('/'), root);\n  },\n\n  getEnvironment: function () {\n    return args.env || process.env.NODE_ENV || 'development';\n  },\n\n  getSequelize: function (file) {\n    var sequelizePath;\n    var resolvePath = file ? path.join('sequelize', file) : 'sequelize';\n    var resolveOptions = { basedir: process.cwd() };\n\n    try {\n      sequelizePath = require.resolve(resolvePath, resolveOptions);\n    } catch (e) {\n    }\n\n    try {\n      sequelizePath = sequelizePath || resolve(resolvePath, resolveOptions);\n    } catch (e) {\n      console.error('Unable to resolve sequelize package in ' + process.cwd());\n      process.exit(1);\n    }\n\n    return require(sequelizePath);\n  },\n\n  execQuery: function (sequelize, sql, options) {\n    if (sequelize.query.length === 2) {\n      return sequelize.query(sql, options);\n    } else {\n      return sequelize.query(sql, null, options);\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/lib/helpers/gulp-helper.js":"'use strict';\n\nvar helpers = require(__dirname);\nvar _       = require('lodash');\nvar clc     = require('cli-color');\n\nvar config = helpers.config.init();\n\nmodule.exports = {\n  addTask: function (gulp, taskName, task) {\n    gulp.task(\n      taskName,\n      task.descriptions.short,\n      task.dependencies || [],\n      function () {\n        return config.then(function () {\n          return task.task();\n        });\n      }, {\n        aliases: task.aliases || []\n      }\n    );\n  },\n\n  addHelp: function (gulp, taskName, task) {\n    var self = this;\n\n    gulp.task(\n      'help:' + taskName,\n      false,\n      function () {\n        return config.then(function () {\n          Object.keys(task.descriptions).forEach(function (description) {\n            if (typeof task.descriptions[description] === 'function') {\n              task.descriptions[description] = task.descriptions[description]();\n            }\n          });\n          helpers.view.log(clc.bold('COMMANDS'));\n\n          var commands      = [ taskName ].concat(task.aliases || []);\n          var commandMargin = Math.max.apply(null, commands.map(function (c) {\n            return c.length;\n          }));\n\n          commands.forEach(function (command) {\n            var s = [\n              'sequelize', command + (new Array(commandMargin - command.length + 1).join(' ')),\n              '--', task.descriptions.short\n            ].join(' ');\n\n            helpers.view.log('    ' + s);\n          });\n          helpers.view.log();\n\n          helpers.view.log(clc.bold('DESCRIPTION'));\n\n          (task.descriptions.long || [task.descriptions.short]).forEach(function (line) {\n            helpers.view.log('    ' + line);\n          });\n\n          (function (options) {\n            if (options) {\n              var margin = Math.max.apply(null, Object.keys(options).map(function (o) {\n                return o.length;\n              }));\n\n              helpers.view.log();\n              helpers.view.log(clc.bold('OPTIONS'));\n\n              Object.keys(options).forEach(function (option) {\n                var args = ['   ', option];\n\n                args.push(new Array(margin - option.length + 1).join(' '));\n                args.push(options[option]);\n\n                helpers.view.log.apply(helpers.view, args);\n              });\n            }\n          })(_.assign(self.getGlobalOptions(), task.descriptions.options));\n\n          helpers.view.log();\n        });\n      }\n    );\n  },\n\n  getGlobalOptions: function () {\n    return {\n      '--env': 'The environment to run the command in. ' +\n        clc.blueBright('Default: development'),\n      '--coffee': 'Enables coffee script support. ' +\n        clc.blueBright('Default: false'),\n      '--config': 'The path to the config file. ' +\n        clc.blueBright('Default: config/config.json'),\n      '--options-path': 'The path to a JSON file with additional options. ' +\n        clc.blueBright('Default: none'),\n      '--migrations-path': 'The path to the migrations folder. ' +\n        clc.blueBright('Default: migrations'),\n      '--seeders-path': 'The path to the seeders folder. ' +\n        clc.blueBright('Default: seeders'),\n      '--models-path': 'The path to the models folder.' +\n        clc.blueBright('Default: models'),\n      '--url': 'The database connection string to use. Alternative to using --config files. ' +\n        clc.blueBright('Default: none')\n    };\n  },\n\n  printManuals: function (tasks) {\n    var manuals = Object.keys(tasks).filter(function (name) {\n      return name.indexOf('help:') === 0;\n    }).sort();\n    var margin  = manuals.reduce(function (m, taskName) {\n      return (m > taskName.length) ? m : taskName.length;\n    }, 0);\n\n    console.log('Available manuals');\n\n    manuals.forEach(function (name) {\n      var args = [' ', name];\n\n      args.push(new Array(margin - name.length + 1).join(' '));\n      args.push('The documentation for \"sequelize ' + name.replace('help:', '') + '\".');\n\n      console.log.apply(console, args);\n    });\n\n    console.log();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/lib/helpers/init-helper.js":"'use strict';\n\nvar helpers = require(__dirname);\nvar path    = require('path');\nvar fs      = require('fs');\nvar clc     = require('cli-color');\n\nmodule.exports = {\n  notifyAboutExistingFile: function (file) {\n    helpers.view.log(\n      'The file ' + clc.blueBright(file) + ' already exists. Run ' +\n      '\"sequelize init --force\" to overwrite it.'\n    );\n  },\n\n  createFolder: function (folderName, folder, force) {\n    if (force) {\n      console.log('Deleting the ' + folderName + ' folder. (--force)');\n\n      try {\n        fs.readdirSync(folder).forEach(function (filename) {\n          fs.unlinkSync(path.resolve(folder, filename));\n        });\n      } catch (e) {\n        console.log(e);\n      }\n\n      try {\n        fs.rmdirSync(folder);\n        console.log('Successfully deleted the ' + folderName + ' folder.');\n      } catch (e) {\n        console.log(e);\n      }\n    }\n\n    try {\n      helpers.generic.mkdirp(folder);\n      console.log('Successfully created ' + folderName + ' folder at \"' + folder + '\".');\n    } catch (e) {\n      console.log(e);\n    }\n  },\n\n  createMigrationsFolder: function (force) {\n    this.createFolder('migrations', helpers.path.getPath('migration'), force);\n  },\n\n  createSeedersFolder: function (force) {\n    this.createFolder('seeders', helpers.path.getPath('seeder'), force);\n  },\n\n  createModelsFolder: function (force) {\n    this.createFolder('models', helpers.path.getModelsPath(), force);\n  },\n\n  createModelsIndexFile: function (force) {\n    var modelsPath = helpers.path.getModelsPath();\n    var indexPath  = path.resolve(\n      modelsPath,\n      helpers.path.addFileExtension('index')\n    );\n\n    if (!helpers.path.existsSync(modelsPath)) {\n      helpers.view.log('Models folder not available.');\n    } else if (helpers.path.existsSync(indexPath) && !force) {\n      this.notifyAboutExistingFile(indexPath);\n    } else {\n      var relativeConfigPath = path.relative(\n        helpers.path.getModelsPath(),\n        helpers.config.getConfigFile()\n      );\n\n      helpers.asset.write(\n        indexPath,\n        helpers.template.render('models/index.js', {\n          configFile: '__dirname + \\'/' + relativeConfigPath + '\\''\n        }, {\n          beautify: false\n        })\n      );\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/lib/helpers/log-helper.js":"'use strict';\n\nvar _ = require('lodash');\n\nmodule.exports = {\n  parse: function (buffer) {\n    var lines  = buffer.toString().split('\\n');\n    var result = lines.map(mapLine);\n\n    return _.compact(result).join('\\n');\n  }\n};\n\nfunction mapLine (line) {\n  return filters().reduce(function (filteredLine, filter) {\n    if (!!filteredLine) {\n      return filter(filteredLine);\n    }\n  }, line);\n}\n\nfunction filters () {\n  return [\n    function filterTimestamps (l) {\n      if (!l.match(/\\[\\d{2}:\\d{2}:\\d{2}\\]/)) {\n        return l;\n      }\n    },\n\n    function filterGulpfile (l) {\n      if (!l.match(/^Using\\sgulpfile/) && !l.match(/^Starting|Finished\\s/)) {\n        return l;\n      }\n    },\n\n    function parseProgramName (l) {\n      if (!l.match(/gulp \\[TASK\\]/)) {\n        return l;\n      } else {\n        return l.replace('gulp [TASK]', 'sequelize [task]');\n      }\n    }\n  ];\n}\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/lib/helpers/migration-helper.js":"'use strict';\n\nvar _         = require('lodash');\nvar helpers   = require(__dirname);\nvar Sequelize = helpers.generic.getSequelize();\n\nmodule.exports = {\n  getTableName: function (modelName) {\n    return Sequelize.Utils.pluralize(modelName);\n  },\n\n  generateTableCreationFileContent: function (args) {\n    return helpers.template.render('migrations/create-table.js', {\n      tableName:  this.getTableName(args.name),\n      attributes: helpers.model.transformAttributes(args.attributes),\n      createdAt:  args.underscored ? 'created_at' : 'createdAt',\n      updatedAt:  args.underscored ? 'updated_at' : 'updatedAt'\n    });\n  },\n\n  generateMigrationName: function (args) {\n    return _.trimStart(_.kebabCase('create-' + args.name), '-');\n  },\n\n  generateTableCreationFile: function (args) {\n    var migrationName = this.generateMigrationName(args);\n    var migrationPath = helpers.path.getMigrationPath(migrationName);\n\n    helpers.asset.write(migrationPath, this.generateTableCreationFileContent(args));\n  }\n};\n"}