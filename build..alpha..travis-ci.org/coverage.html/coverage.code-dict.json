{"/home/travis/build/npmtest/node-npmtest-sequelize-cli/test.js":"/* istanbul instrument in package npmtest_sequelize_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/lib.npmtest_sequelize_cli.js":"/* istanbul instrument in package npmtest_sequelize_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sequelize_cli = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sequelize_cli = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sequelize-cli && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sequelize_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sequelize_cli\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sequelize_cli.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sequelize_cli.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sequelize_cli.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sequelize_cli.__dirname + '/lib.npmtest_sequelize_cli.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/bin/sequelize":"#!/usr/bin/env node\n\n'use strict';\n\nvar spawn   = require('child_process').spawn;\nvar path    = require('path');\nvar args    = process.argv.slice(2);\nvar yargs   = require('yargs');\nvar argv    = yargs.argv;\nvar _       = require('lodash');\nvar helpers = require(path.resolve(__dirname, '..', 'lib', 'helpers'));\n\nif ((args[0] === '-v') || (args[0] === '-V')) {\n  args = ['version'];\n}\n\n// Let's load additional options from a file and add it to the gulp call\n(function (optionsPath) {\n  var rcFile = path.resolve(process.cwd(), '.sequelizerc');\n\n  if (!optionsPath && helpers.path.existsSync(rcFile)) {\n    optionsPath = rcFile;\n  }\n\n  if (optionsPath) {\n    optionsPath = path.resolve(process.cwd(), optionsPath);\n\n    var options     = require(optionsPath);\n    var optionsKeys = Object.keys(options);\n\n    optionsKeys = optionsKeys.filter(function (optionKey) {\n      return !argv[optionKey];\n    });\n\n    optionsKeys.forEach(function (optionKey) {\n      var value = options[optionKey];\n\n      if (optionKey.indexOf('--') !== 0) {\n        optionKey = '--' + optionKey;\n      }\n\n      args = args.concat([optionKey, value]);\n    });\n  }\n})(yargs.argv.optionsPath);\n\nargs = args.concat([\n  '--gulpfile', path.resolve(__dirname, '..', 'lib', 'gulpfile.js'),\n  '--cwd', process.cwd()\n]);\n\nargs.unshift(findGulpCliPath());\n\n// Add harmony support\n[ '--harmony-scoping', '--harmony-modules', '--harmony-proxies',\n  '--harmony-generators', '--harmony-numeric-literals', '--harmony-strings',\n  '--harmony-arrays', '--harmony-arrow-functions', '--harmony'\n].forEach(function (harmonyFlag) {\n  if (_.includes(args, harmonyFlag)) {\n    args = _.without(args, harmonyFlag);\n    args.unshift(harmonyFlag);\n  }\n});\n\nvar call = spawn(process.argv[0], args);\n\nhelpers.view.teaser();\n\ncall.stdout.on('data', function (data) {\n  var output = helpers.log.parse(data);\n\n  if (!!output) {\n    console.log(output);\n  }\n});\n\ncall.stderr.on('data', function (data) {\n  process.stderr.write(data);\n});\n\ncall.on('exit', function (code) {\n  process.exit(code);\n});\n\nfunction findGulpCliPath () {\n  var gulp = path.resolve(__dirname, '..', 'node_modules', 'gulp', 'bin', 'gulp.js');\n\n  if (!helpers.path.existsSync(gulp)) {\n    gulp = path.resolve(process.cwd(), 'node_modules', 'gulp', 'bin', 'gulp.js');\n  }\n\n  if (!helpers.path.existsSync(gulp)) {\n    gulp = require.resolve('gulp').replace('index.js', 'bin/gulp.js');\n  }\n\n  if (!helpers.path.existsSync(gulp)) {\n    throw new Error('Unable to find the `gulp` binary');\n  }\n\n  return gulp;\n}\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/gulpfile.js":"'use strict';\n\nvar args        = require('yargs').argv;\nvar gulp        = require('gulp');\nvar jscs        = require('gulp-jscs');\nvar jshint      = require('gulp-jshint');\nvar mocha       = require('gulp-mocha');\nvar path        = require('path');\nvar runSequence = require('run-sequence');\n\ngulp.task('default', function (done) {\n  runSequence('lint', 'test', done);\n});\n\ngulp.task('test', function (done) {\n  runSequence('test-unit', 'test-integration', done);\n});\n\ngulp.task('lint', function (done) {\n  runSequence('lint-code', done);\n});\n\ngulp.task('lint-code', function () {\n  return gulp\n    .src([\n      './gulpfile.js',\n      './index.js',\n      './bin/**/*',\n      './lib/**/*.js',\n      '!./lib/assets/**/*.js',\n      './test/**/*.js',\n      '!./test/support/tmp/**/*.js'\n    ])\n    .pipe(jscs())\n    .pipe(jshint())\n    .pipe(jshint.reporter('default'))\n    .pipe(jshint.reporter('fail'));\n});\n\ngulp.task('test-unit', function () {\n  // TODO\n});\n\ngulp.task('test-integration', function () {\n  gulp\n    .src(path.resolve(__dirname, 'test', '**', '*.test.js'), { read: false })\n    .pipe(mocha({\n      reporter:    'spec',\n      ignoreLeaks: true,\n      timeout:     30000,\n      grep:        args.grep\n    }));\n});\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/lib/gulpfile.js":"'use strict';\n\nvar gulp    = require('gulp');\nvar path    = require('path');\nvar fs      = require('fs');\nvar helpers = require(path.resolve(__dirname, 'helpers'));\n\nrequire('gulp-help')(gulp, {\n  aliases: ['h'],\n  afterPrintCallback: helpers.gulp.printManuals\n});\n\nfs\n  .readdirSync(path.resolve(__dirname, 'tasks'))\n  .filter(function (file) {\n    return (file.indexOf('.') !== 0);\n  })\n  .map(function (file) {\n    return require(path.resolve(__dirname, 'tasks', file));\n  })\n  .forEach(function (tasks) {\n    Object.keys(tasks).forEach(function (taskName) {\n      helpers.gulp.addTask(gulp, taskName, tasks[taskName]);\n      helpers.gulp.addHelp(gulp, taskName, tasks[taskName]);\n    });\n  });\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/lib/helpers/index.js":"'use strict';\n\nvar path = require('path');\nvar fs   = require('fs');\n\nmodule.exports = {};\n\nfs\n  .readdirSync(__dirname)\n  .filter(function (file) {\n    return (file.indexOf('.') !== 0) && (file.indexOf('index.js') === -1);\n  })\n  .forEach(function (file) {\n    module.exports[file.replace('-helper.js', '')] = require(path.resolve(__dirname, file));\n  });\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/lib/helpers/asset-helper.js":"'use strict';\n\nvar fs   = require('fs-extra');\nvar path = require('path');\n\nmodule.exports = {\n  copy: function (from, to) {\n    fs.copySync(path.resolve(__dirname, '..', 'assets', from), to);\n  },\n\n  read: function (assetPath) {\n    return fs.readFileSync(path.resolve(__dirname, '..', 'assets', assetPath)).toString();\n  },\n\n  write: function (targetPath, content) {\n    fs.writeFileSync(targetPath, content);\n  },\n\n  inject: function (filePath, token, content) {\n    var fileContent = fs.readFileSync(filePath).toString();\n\n    fs.writeFileSync(filePath, fileContent.replace(token, content));\n  },\n\n  injectConfigFilePath: function (filePath, configPath) {\n    this.inject(filePath, '__CONFIG_FILE__', configPath);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/lib/helpers/config-helper.js":"'use strict';\n\nvar args     = require('yargs').argv;\nvar Bluebird = require('bluebird');\nvar path     = require('path');\nvar fs       = require('fs');\nvar helpers  = require(__dirname);\nvar url      = require('url');\nvar _        = require('lodash');\n\nvar api = {\n  config: undefined,\n  rawConfig: undefined,\n  error: undefined,\n  init: function () {\n    return Bluebird.resolve()\n      .then(function () {\n        var config;\n\n        if (args.url) {\n          config = api.parseDbUrl(args.url);\n        } else {\n          try {\n            config = require(api.getConfigFile());\n          } catch (e) {\n            api.error = e;\n          }\n        }\n        return config;\n      })\n      .then(function (config) {\n        if (typeof config === 'object' || config === undefined) {\n          return config;\n        } else if (config.length === 1) {\n          return Bluebird.promisify(config)();\n        } else {\n          return config();\n        }\n      })\n      .then(function (config) {\n        api.rawConfig = config;\n      })\n      .then(function () {\n        // Always return the full config api\n        return api;\n      });\n  },\n  getConfigFile: function () {\n    if (args.config) {\n      return path.resolve(process.cwd(), args.config);\n    }\n\n    var defaultPath = path.resolve(process.cwd(), 'config', 'config.json');\n    var alternativePath = defaultPath.replace('.json', '.js');\n\n    return helpers.path.existsSync(alternativePath) ? alternativePath : defaultPath;\n  },\n\n  relativeConfigFile: function () {\n    return path.relative(process.cwd(), api.getConfigFile());\n  },\n\n  configFileExists: function () {\n    return helpers.path.existsSync(api.getConfigFile());\n  },\n\n  getDefaultConfig: function () {\n    return JSON.stringify({\n      development: {\n        username: 'root',\n        password: null,\n        database: 'database_development',\n        host: '127.0.0.1',\n        dialect: 'mysql'\n      },\n      test: {\n        username: 'root',\n        password: null,\n        database: 'database_test',\n        host: '127.0.0.1',\n        dialect: 'mysql'\n      },\n      production: {\n        username: 'root',\n        password: null,\n        database: 'database_production',\n        host: '127.0.0.1',\n        dialect: 'mysql'\n      }\n    }, undefined, 2) + '\\n';\n  },\n\n  writeDefaultConfig: function () {\n    var configPath = path.dirname(api.getConfigFile());\n\n    if (!helpers.path.existsSync(configPath)) {\n      fs.mkdirSync(configPath);\n    }\n\n    fs.writeFileSync(api.getConfigFile(), api.getDefaultConfig());\n  },\n\n  readConfig: function () {\n    if (!api.config) {\n      var env = helpers.generic.getEnvironment();\n\n      if (api.rawConfig === undefined) {\n        throw new Error(\n          'Error reading \"' +\n            api.relativeConfigFile() +\n            '\". Error: ' + api.error\n        );\n      }\n\n      if (typeof api.rawConfig !== 'object') {\n        throw new Error(\n          'Config must be an object or a promise for an object: ' +\n            api.relativeConfigFile()\n        );\n      }\n\n      if (args.url) {\n        console.log('Parsed url ' + api.filteredUrl(args.url, api.rawConfig));\n      } else {\n        console.log('Loaded configuration file \"' + api.relativeConfigFile() + '\".');\n      }\n\n      if (api.rawConfig[env]) {\n        console.log('Using environment \"' + env + '\".');\n\n        // The Sequelize library needs a function passed in to its logging option\n        if (api.rawConfig.logging && !_.isFunction(api.rawConfig.logging)) {\n          api.rawConfig.logging = console.log;\n        }\n\n        api.rawConfig = api.rawConfig[env];\n      }\n\n      // in case url is present - we overwrite the configuration\n      if (api.rawConfig.url) {\n        api.rawConfig = _.merge(api.rawConfig, api.parseDbUrl(api.rawConfig.url));\n      }\n\n      api.config = api.rawConfig;\n    }\n    return api.config;\n  },\n\n  filteredUrl: function (url, config) {\n    var regExp = new RegExp(':?' + (config.password || '') + '@');\n\n    return url.replace(regExp, ':*****@');\n  },\n\n  supportsCoffee: function (options) {\n    var config = null;\n\n    options = _.assign({\n      ignoreConfig: true\n    }, options || {});\n\n    try {\n      config = api.readConfig();\n    } catch (e) {\n      if (options.ignoreConfig) {\n        config = {};\n      } else {\n        throw e;\n      }\n    }\n\n    return args.coffee || config.coffee;\n  },\n\n  urlStringToConfigHash: function (urlString) {\n    try {\n      var urlParts = url.parse(urlString);\n      var result   = {\n        database: urlParts.path.replace(/^\\//,  ''),\n        dialect:  urlParts.protocol,\n        host:     urlParts.hostname,\n        port:     urlParts.port\n      };\n\n      if (urlParts.auth) {\n        result = _.assign(result, {\n          username: urlParts.auth.split(':')[0],\n          password: urlParts.auth.split(':')[1]\n        });\n      }\n\n      return result;\n    } catch (e) {\n      throw new Error('Error parsing url: ' + urlString);\n    }\n  },\n\n  parseDbUrl: function (urlString) {\n    var config = api.urlStringToConfigHash(urlString);\n\n    config = _.assign(config, {\n      dialect: config.dialect.replace(/:$/, '')\n    });\n\n    if (config.dialect === 'sqlite') {\n      config = _.assign(config, {\n        storage: '/' + config.database\n      });\n    }\n\n    return config;\n  }\n};\n\nmodule.exports = api;\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/lib/helpers/generic-helper.js":"'use strict';\n\nvar fs   = require('fs');\nvar args = require('yargs').argv;\nvar path = require('path');\nvar resolve = require('resolve').sync;\n\nmodule.exports = {\n  mkdirp: function (path, root) {\n    var dirs = path.split('/');\n    var dir  = dirs.shift();\n\n    root = (root || '') + dir + '/';\n\n    try {\n      fs.mkdirSync(root);\n    } catch (e) {\n      // dir wasn't made, something went wrong\n      if (!fs.statSync(root).isDirectory()) {\n        throw new Error(e);\n      }\n    }\n\n    return !dirs.length || this.mkdirp(dirs.join('/'), root);\n  },\n\n  getEnvironment: function () {\n    return args.env || process.env.NODE_ENV || 'development';\n  },\n\n  getSequelize: function (file) {\n    var sequelizePath;\n    var resolvePath = file ? path.join('sequelize', file) : 'sequelize';\n    var resolveOptions = { basedir: process.cwd() };\n\n    try {\n      sequelizePath = require.resolve(resolvePath, resolveOptions);\n    } catch (e) {\n    }\n\n    try {\n      sequelizePath = sequelizePath || resolve(resolvePath, resolveOptions);\n    } catch (e) {\n      console.error('Unable to resolve sequelize package in ' + process.cwd());\n      process.exit(1);\n    }\n\n    return require(sequelizePath);\n  },\n\n  execQuery: function (sequelize, sql, options) {\n    if (sequelize.query.length === 2) {\n      return sequelize.query(sql, options);\n    } else {\n      return sequelize.query(sql, null, options);\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/lib/helpers/gulp-helper.js":"'use strict';\n\nvar helpers = require(__dirname);\nvar _       = require('lodash');\nvar clc     = require('cli-color');\n\nvar config = helpers.config.init();\n\nmodule.exports = {\n  addTask: function (gulp, taskName, task) {\n    gulp.task(\n      taskName,\n      task.descriptions.short,\n      task.dependencies || [],\n      function () {\n        return config.then(function () {\n          return task.task();\n        });\n      }, {\n        aliases: task.aliases || []\n      }\n    );\n  },\n\n  addHelp: function (gulp, taskName, task) {\n    var self = this;\n\n    gulp.task(\n      'help:' + taskName,\n      false,\n      function () {\n        return config.then(function () {\n          Object.keys(task.descriptions).forEach(function (description) {\n            if (typeof task.descriptions[description] === 'function') {\n              task.descriptions[description] = task.descriptions[description]();\n            }\n          });\n          helpers.view.log(clc.bold('COMMANDS'));\n\n          var commands      = [ taskName ].concat(task.aliases || []);\n          var commandMargin = Math.max.apply(null, commands.map(function (c) {\n            return c.length;\n          }));\n\n          commands.forEach(function (command) {\n            var s = [\n              'sequelize', command + (new Array(commandMargin - command.length + 1).join(' ')),\n              '--', task.descriptions.short\n            ].join(' ');\n\n            helpers.view.log('    ' + s);\n          });\n          helpers.view.log();\n\n          helpers.view.log(clc.bold('DESCRIPTION'));\n\n          (task.descriptions.long || [task.descriptions.short]).forEach(function (line) {\n            helpers.view.log('    ' + line);\n          });\n\n          (function (options) {\n            if (options) {\n              var margin = Math.max.apply(null, Object.keys(options).map(function (o) {\n                return o.length;\n              }));\n\n              helpers.view.log();\n              helpers.view.log(clc.bold('OPTIONS'));\n\n              Object.keys(options).forEach(function (option) {\n                var args = ['   ', option];\n\n                args.push(new Array(margin - option.length + 1).join(' '));\n                args.push(options[option]);\n\n                helpers.view.log.apply(helpers.view, args);\n              });\n            }\n          })(_.assign(self.getGlobalOptions(), task.descriptions.options));\n\n          helpers.view.log();\n        });\n      }\n    );\n  },\n\n  getGlobalOptions: function () {\n    return {\n      '--env': 'The environment to run the command in. ' +\n        clc.blueBright('Default: development'),\n      '--coffee': 'Enables coffee script support. ' +\n        clc.blueBright('Default: false'),\n      '--config': 'The path to the config file. ' +\n        clc.blueBright('Default: config/config.json'),\n      '--options-path': 'The path to a JSON file with additional options. ' +\n        clc.blueBright('Default: none'),\n      '--migrations-path': 'The path to the migrations folder. ' +\n        clc.blueBright('Default: migrations'),\n      '--seeders-path': 'The path to the seeders folder. ' +\n        clc.blueBright('Default: seeders'),\n      '--models-path': 'The path to the models folder.' +\n        clc.blueBright('Default: models'),\n      '--url': 'The database connection string to use. Alternative to using --config files. ' +\n        clc.blueBright('Default: none')\n    };\n  },\n\n  printManuals: function (tasks) {\n    var manuals = Object.keys(tasks).filter(function (name) {\n      return name.indexOf('help:') === 0;\n    }).sort();\n    var margin  = manuals.reduce(function (m, taskName) {\n      return (m > taskName.length) ? m : taskName.length;\n    }, 0);\n\n    console.log('Available manuals');\n\n    manuals.forEach(function (name) {\n      var args = [' ', name];\n\n      args.push(new Array(margin - name.length + 1).join(' '));\n      args.push('The documentation for \"sequelize ' + name.replace('help:', '') + '\".');\n\n      console.log.apply(console, args);\n    });\n\n    console.log();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/lib/helpers/init-helper.js":"'use strict';\n\nvar helpers = require(__dirname);\nvar path    = require('path');\nvar fs      = require('fs');\nvar clc     = require('cli-color');\n\nmodule.exports = {\n  notifyAboutExistingFile: function (file) {\n    helpers.view.log(\n      'The file ' + clc.blueBright(file) + ' already exists. Run ' +\n      '\"sequelize init --force\" to overwrite it.'\n    );\n  },\n\n  createFolder: function (folderName, folder, force) {\n    if (force) {\n      console.log('Deleting the ' + folderName + ' folder. (--force)');\n\n      try {\n        fs.readdirSync(folder).forEach(function (filename) {\n          fs.unlinkSync(path.resolve(folder, filename));\n        });\n      } catch (e) {\n        console.log(e);\n      }\n\n      try {\n        fs.rmdirSync(folder);\n        console.log('Successfully deleted the ' + folderName + ' folder.');\n      } catch (e) {\n        console.log(e);\n      }\n    }\n\n    try {\n      helpers.generic.mkdirp(folder);\n      console.log('Successfully created ' + folderName + ' folder at \"' + folder + '\".');\n    } catch (e) {\n      console.log(e);\n    }\n  },\n\n  createMigrationsFolder: function (force) {\n    this.createFolder('migrations', helpers.path.getPath('migration'), force);\n  },\n\n  createSeedersFolder: function (force) {\n    this.createFolder('seeders', helpers.path.getPath('seeder'), force);\n  },\n\n  createModelsFolder: function (force) {\n    this.createFolder('models', helpers.path.getModelsPath(), force);\n  },\n\n  createModelsIndexFile: function (force) {\n    var modelsPath = helpers.path.getModelsPath();\n    var indexPath  = path.resolve(\n      modelsPath,\n      helpers.path.addFileExtension('index')\n    );\n\n    if (!helpers.path.existsSync(modelsPath)) {\n      helpers.view.log('Models folder not available.');\n    } else if (helpers.path.existsSync(indexPath) && !force) {\n      this.notifyAboutExistingFile(indexPath);\n    } else {\n      var relativeConfigPath = path.relative(\n        helpers.path.getModelsPath(),\n        helpers.config.getConfigFile()\n      );\n\n      helpers.asset.write(\n        indexPath,\n        helpers.template.render('models/index.js', {\n          configFile: '__dirname + \\'/' + relativeConfigPath + '\\''\n        }, {\n          beautify: false\n        })\n      );\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/lib/helpers/migration-helper.js":"'use strict';\n\nvar _         = require('lodash');\nvar helpers   = require(__dirname);\nvar Sequelize = helpers.generic.getSequelize();\n\nmodule.exports = {\n  getTableName: function (modelName) {\n    return Sequelize.Utils.pluralize(modelName);\n  },\n\n  generateTableCreationFileContent: function (args) {\n    return helpers.template.render('migrations/create-table.js', {\n      tableName:  this.getTableName(args.name),\n      attributes: helpers.model.transformAttributes(args.attributes),\n      createdAt:  args.underscored ? 'created_at' : 'createdAt',\n      updatedAt:  args.underscored ? 'updated_at' : 'updatedAt'\n    });\n  },\n\n  generateMigrationName: function (args) {\n    return _.trimStart(_.kebabCase('create-' + args.name), '-');\n  },\n\n  generateTableCreationFile: function (args) {\n    var migrationName = this.generateMigrationName(args);\n    var migrationPath = helpers.path.getMigrationPath(migrationName);\n\n    helpers.asset.write(migrationPath, this.generateTableCreationFileContent(args));\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/lib/helpers/model-helper.js":"'use strict';\n\nvar clc     = require('cli-color');\nvar helpers = require(__dirname);\n\nmodule.exports = {\n  notifyAboutExistingFile: function (file) {\n    helpers.view.error(\n      'The file ' + clc.blueBright(file) + ' already exists. ' +\n      'Run \"sequelize model:create --force\" to overwrite it.'\n    );\n  },\n\n  transformAttributes: function (flag) {\n    /*\n      possible flag formats:\n      - first_name:string,last_name:string,bio:text\n      - 'first_name:string last_name:string bio:text'\n      - 'first_name:string, last_name:string, bio:text'\n    */\n\n    var set    = flag.replace(/,/g, ' ').split(/\\s+/);\n    var result = {};\n\n    set.forEach(function (pair) {\n      var split = pair.split(':');\n\n      result[split[0]] = split[1];\n    });\n\n    return result;\n  },\n\n  generateFileContent: function (args) {\n    return helpers.template.render('models/model.js', {\n      name:       args.name,\n      attributes: this.transformAttributes(args.attributes),\n      underscored: args.underscored\n    });\n  },\n\n  generateFile: function (args) {\n    var modelPath = helpers.path.getModelPath(args.name);\n\n    helpers.asset.write(modelPath, this.generateFileContent(args));\n  },\n\n  modelFileExists: function (filePath) {\n    return helpers.path.existsSync(filePath);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/lib/helpers/path-helper.js":"'use strict';\n\nvar helpers = require(__dirname);\nvar args    = require('yargs').argv;\nvar fs      = require('fs');\nvar path    = require('path');\nvar moment  = require('moment');\nvar resolve = require('resolve').sync;\n\nmodule.exports = {\n  getPath: function (type) {\n    type = type + 's';\n\n    var result = args[type + 'Path'] || path.resolve(process.cwd(), type);\n\n    if (path.normalize(result) !== path.resolve(result)) {\n      // the path is relative\n      result = path.resolve(process.cwd(), result);\n    }\n\n    return result;\n  },\n\n  getFileName: function (type, name, options) {\n    return this.addFileExtension(\n      [\n        moment().utc().format('YYYYMMDDHHmmss'),\n        !!name ? name : 'unnamed-' + type\n      ].join('-'),\n      options\n    );\n  },\n\n  getFileExtension: function (options) {\n    return helpers.config.supportsCoffee(options) ? 'coffee' : 'js';\n  },\n\n  addFileExtension: function (basename, options) {\n    return [basename, this.getFileExtension(options)].join('.');\n  },\n\n  getMigrationPath: function (migrationName) {\n    return path.resolve(this.getPath('migration'), this.getFileName('migration', migrationName));\n  },\n\n  getSeederPath: function (seederName) {\n    return path.resolve(this.getPath('seeder'), this.getFileName('seeder', seederName));\n  },\n\n  getModelsPath: function () {\n    return args.modelsPath || path.resolve(process.cwd(), 'models');\n  },\n\n  getModelPath: function (modelName) {\n    return path.resolve(\n      this.getModelsPath(),\n      this.addFileExtension(modelName.toLowerCase())\n    );\n  },\n\n  resolve: function (packageName) {\n    var result;\n\n    try {\n      result = resolve(packageName, { basedir: process.cwd() });\n      result = require(result);\n    } catch (e) {\n      try {\n        result = require(packageName);\n      } catch (e) {}\n    }\n\n    return result;\n  },\n\n  existsSync: function (path) {\n    if (fs.accessSync) {\n      try {\n        fs.accessSync(path, fs.R_OK);\n        return true;\n      } catch (e) {\n        return false;\n      }\n    } else {\n      return fs.existsSync(path);\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/lib/helpers/template-helper.js":"'use strict';\n\nvar _        = require('lodash');\nvar beautify = require('js-beautify');\nvar helpers  = require(__dirname);\n\nmodule.exports = {\n  getCoffeeConverter: function () {\n    return helpers.path.resolve('js2coffee') || (function () {\n      console.log('Unable to find \\'js2coffee\\'. Please add it to your project.');\n      process.exit(1);\n    })();\n  },\n\n  render: function (path, locals, options) {\n    options = _.assign({\n      beautify: true,\n      indent_size: 2,\n      preserve_newlines: false\n    }, options || {});\n\n    var template = helpers.asset.read(path);\n    var content  = _.template(template)(locals || {});\n\n    if (options.beautify) {\n      content = beautify(content, options);\n    }\n\n    if (helpers.config.supportsCoffee()) {\n      content = this.getCoffeeConverter().build(content);\n      content = content.code || content;\n    }\n\n    return content;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/lib/helpers/umzug-helper.js":"'use strict';\n\nvar path    = require('path');\nvar _       = require('lodash');\nvar helpers = require(__dirname);\n\nvar storage = {\n  migration: 'sequelize',\n  seeder: 'none'\n};\nvar storageTableName = {\n  migration: 'SequelizeMeta',\n  seeder: 'SequelizeData'\n};\nvar storageJsonName = {\n  migration: 'sequelize-meta.json',\n  seeder: 'sequelize-data.json'\n};\n\nmodule.exports = {\n  getStorageOption: function (property, fallback) {\n    return helpers.config.readConfig()[property] || fallback;\n  },\n\n  getStorage: function (type) {\n    return this.getStorageOption(type + 'Storage', storage[type]);\n  },\n\n  getStoragePath: function (type) {\n    var fallbackPath = path.join(process.cwd(), storageJsonName[type]);\n\n    return this.getStorageOption(type + 'StoragePath', fallbackPath);\n  },\n\n  getTableName: function (type) {\n    return this.getStorageOption(type + 'StorageTableName', storageTableName[type]);\n  },\n\n  getStorageOptions: function (type, extraOptions) {\n    var options = {};\n\n    if (this.getStorage(type) === 'json') {\n      options.path = this.getStoragePath(type);\n    } else if (this.getStorage(type) === 'sequelize') {\n      options.tableName = this.getTableName(type);\n    }\n\n    _.assign(options, extraOptions);\n\n    return options;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/lib/helpers/version-helper.js":"'use strict';\n\nvar path        = require('path');\nvar packageJson = require(path.resolve(__dirname, '..', '..', 'package.json'));\nvar helpers     = require(__dirname);\nvar findup      = require('findup-sync');\n\nmodule.exports = {\n  getCliVersion: function () {\n    return packageJson.version;\n  },\n\n  getOrmVersion: function () {\n    return helpers.generic.getSequelize('package.json').version;\n  },\n\n  getDialect: function () {\n    try {\n      return helpers.config.readConfig();\n    } catch (e) {\n      return null;\n    }\n  },\n\n  getDialectVersion: function () {\n    var adapterName = this.getDialectName();\n\n    try {\n      if (adapterName) {\n        return require(\n          findup('package.json')\n        ).dependencies[adapterName];\n      }\n    } catch (e) {\n    }\n\n    return null;\n  },\n\n  getDialectName: function () {\n    var config = this.getDialect();\n\n    if (config) {\n      return {\n        'sqlite':   'sqlite3',\n        'postgres': 'pg',\n        'mariadb':  'mariasql',\n        'mysql':    'mysql'\n      }[config.dialect];\n    } else {\n      return null;\n    }\n  },\n\n  getNodeVersion: function () {\n    return process.version.replace('v', '');\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/lib/helpers/view-helper.js":"'use strict';\n\nvar helpers = require(__dirname);\nvar clc     = require('cli-color');\nvar _       = require('lodash');\n\nmodule.exports = {\n  teaser: function () {\n    var versions = [\n      'Node: ' + helpers.version.getNodeVersion(),\n      'CLI: '  + helpers.version.getCliVersion(),\n      'ORM: '  + helpers.version.getOrmVersion()\n    ];\n\n    if (helpers.version.getDialectName() && helpers.version.getDialectVersion()) {\n      versions.push(\n        helpers.version.getDialectName() +\n        ': ' +\n        helpers.version.getDialectVersion()\n      );\n    }\n\n    this.log();\n    this.log(clc.underline('Sequelize [' + versions.join(', ') + ']'));\n    this.log();\n  },\n\n  log: console.log,\n  error: console.error,\n\n  pad: function (s, smth) {\n    var margin = smth;\n\n    if (_.isObject(margin)) {\n      margin = Object.keys(margin);\n    }\n\n    if (Array.isArray(margin)) {\n      margin = Math.max.apply(null, margin.map(function (o) {\n        return o.length;\n      }));\n    }\n\n    return s + new Array(margin - s.length + 1).join(' ');\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/lib/tasks/db.js":"'use strict';\n\nvar Bluebird  = require('bluebird');\nvar fs        = require('fs');\nvar path      = require('path');\nvar url       = require('url');\nvar helpers   = require(path.resolve(__dirname, '..', 'helpers'));\nvar args      = require('yargs').string('seed').argv;\nvar _         = require('lodash');\nvar Sequelize = helpers.generic.getSequelize();\nvar Umzug     = require('umzug');\nvar clc       = require('cli-color');\n\nmodule.exports = {\n  'db:migrate': {\n    descriptions: {\n      'short': 'Run pending migrations.',\n      'long': [\n        'The command runs every not yet executed migration.'\n      ]\n    },\n\n    task: function () {\n      return getMigrator('migration').then(function (migrator) {\n        return ensureCurrentMetaSchema(migrator).then(function () {\n          return migrator.pending();\n        }).then(function (migrations) {\n          if (migrations.length === 0) {\n            console.log('No migrations were executed, database schema was already up to date.');\n            process.exit(0);\n          }\n        }).then(function () {\n          return migrator.up();\n        }).then(function () {\n          process.exit(0);\n        }).catch(function (err) {\n          console.error(err);\n          process.exit(1);\n        });\n      });\n    }\n  },\n\n  'db:seed': {\n    descriptions: {\n      'short': 'Run specified seeder.',\n      'long': [\n        'The command runs every existing seed file.'\n      ],\n      options: {\n        '--seed': 'List of seed files to run.'\n      }\n    },\n\n    preChecks: [\n      ensureSeeds\n    ],\n\n    task: function () {\n      this.preChecks.forEach(function (preCheck) {\n        preCheck();\n      });\n\n      return getMigrator('seeder').then(function (migrator) {\n        return migrator.up(args.seed)\n        .then(function () {\n          process.exit(0);\n        })\n        .catch(function (err) {\n          console.error('Seed file failed with error:', err.message, err.stack);\n          process.exit(1);\n        });\n      });\n    }\n  },\n\n  'db:seed:all': {\n    descriptions: {\n      'short': 'Run every seeder.',\n      'long': [\n        'The command runs every existing seed file in alphabetical order.'\n      ]\n    },\n\n    task: function () {\n      return getMigrator('seeder').then(function (migrator) {\n        return migrator.pending()\n        .then(function (seeders) {\n          if (seeders.length === 0) {\n            console.log('No seeders found.');\n            process.exit(0);\n          }\n\n          return migrator.up({migrations: _.chain(seeders).map('file').value()});\n        }).then(function () {\n          process.exit(0);\n        })\n        .catch(function (err) {\n          console.error('Seed file failed with error:', err.message, err.stack);\n          process.exit(1);\n        });\n      });\n    }\n  },\n\n  'db:seed:undo:all': {\n    descriptions: {\n      'short': 'Deletes data from the database.',\n      'long': [\n        'The command tries unseeding every existing seed.'\n      ]\n    },\n\n    task: function () {\n      return getMigrator('seeder').then(function (migrator) {\n        return (\n          helpers.umzug.getStorage('seeder') === 'none' ? migrator.pending() : migrator.executed()\n        )\n        .then(function (seeders) {\n          if (seeders.length === 0) {\n            console.log('No seeders found.');\n            process.exit(0);\n          }\n\n          return migrator.down({migrations: _.chain(seeders).map('file').reverse().value()});\n        }).then(function () {\n          process.exit(0);\n        })\n        .catch(function (err) {\n          console.error('Seed file failed with error:', err.message, err.stack);\n          process.exit(1);\n        });\n      });\n    }\n  },\n\n  'db:seed:undo': {\n    descriptions: {\n      'short': 'Deletes data from the database.',\n      'long': [\n        'The command unseeds every existing seed.'\n      ],\n      options: {\n        '--seed': 'List of seed files to unseed.'\n      }\n    },\n\n    preChecks: [\n      ensureSeeds\n    ],\n\n    task: function () {\n      this.preChecks.forEach(function (preCheck) {\n        preCheck();\n      });\n\n      return getMigrator('seeder').then(function (migrator) {\n        return migrator.down({migrations: args.seed})\n        .then(function () {\n          process.exit(0);\n        })\n        .catch(function (err) {\n          console.error('Seed file failed with error:', err.message, err.stack);\n          process.exit(1);\n        });\n      });\n    }\n  },\n\n  'db:migrate:status': {\n    descriptions: {\n      'short': 'List the status of all migrations'\n    },\n\n    task: function () {\n      return getMigrator('migration').then(function (migrator) {\n        return ensureCurrentMetaSchema(migrator).then(function () {\n          return migrator.executed();\n        }).then(function (migrations) {\n          _.forEach(migrations, function (migration) {\n            console.log('up  ', migration.file);\n          });\n        }).then(function () {\n          return migrator.pending();\n        }).then(function (migrations) {\n          _.forEach(migrations, function (migration) {\n            console.log('down', migration.file);\n          });\n        }).then(function () {\n          process.exit(0);\n        }).catch(function (err) {\n          console.error(err);\n          process.exit(1);\n        });\n      });\n    }\n  },\n\n  'db:migrate:undo': {\n    descriptions: {\n      'short': 'Reverts a migration.',\n      options: {\n        '--name': 'Name of the migration to undo.'\n      }\n    },\n\n    task: function () {\n      return getMigrator('migration').then(function (migrator) {\n        return ensureCurrentMetaSchema(migrator).then(function () {\n          return migrator.executed();\n        }).then(function (migrations) {\n          if (migrations.length === 0) {\n            console.log('No executed migrations found.');\n            process.exit(0);\n          }\n        }).then(function () {\n          if (args.name) {\n            return migrator.down(args.name);\n          } else {\n            return migrator.down();\n          }\n        }).then(function () {\n          process.exit(0);\n        }).catch(function (err) {\n          console.error(err);\n          process.exit(1);\n        });\n      });\n    }\n  },\n\n  'db:migrate:undo:all': {\n    descriptions: {\n      'short': 'Revert all migrations ran.'\n    },\n\n    task: function () {\n      return getMigrator('migration').then(function (migrator) {\n        return ensureCurrentMetaSchema(migrator).then(function () {\n          return migrator.executed();\n        }).then(function (migrations) {\n          if (migrations.length === 0) {\n            console.log('No executed migrations found.');\n            process.exit(0);\n          }\n        }).then(function () {\n          return migrator.down({to: 0});\n        }).then(function () {\n          process.exit(0);\n        }).catch(function (err) {\n          console.error(err);\n          process.exit(1);\n        });\n      });\n    }\n  },\n\n  'db:migrate:old_schema': {\n    descriptions: {\n      'short': 'Update legacy migration table',\n      'long': [\n        'This command updates the legacy structure of the SequelizeMeta table to',\n        'the newer version which is shipped with the migrator engine \"umzug\" and',\n        'which is the required structure of the CLI since version 1.0.0.',\n        '',\n        'In details this means, that the previous structure (id:int, from:string,',\n        'to:string) gets migrated to the new structure (name:string). As the old',\n        'structure does not actually contain all single migration names but only',\n        'certain ranges, the script will take a look at the migrations folder and',\n        'generate the single migration names accordingly.',\n        '',\n        'Please note that the script will create a backup of your old table schema',\n        'table by renaming the original table to SequelizeMetaBackup.'\n      ]\n    },\n\n    task: function () {\n      tryToMigrateFromOldSchema()\n        .then(function (items) {\n          if (items) {\n            console.log('Successfully migrated ' + items.length + ' migrations.');\n          }\n\n          process.exit(0);\n        }, function (err) {\n          console.log(err.name);\n          process.exit(1);\n        });\n    }\n  }\n};\n\nfunction ensureCurrentMetaSchema (migrator) {\n  var sequelize  = migrator.options.storageOptions.sequelize;\n  var columnName = migrator.options.storageOptions.columnName;\n  var config = helpers.config.readConfig();\n\n  return sequelize.getQueryInterface()\n    .showAllTables()\n    .then(function (tables) {\n      if (tables.indexOf('SequelizeMeta') === -1) {\n        return;\n      }\n\n      return sequelize.queryInterface\n        .describeTable('SequelizeMeta')\n        .then(function (table) {\n          var columns = Object.keys(table);\n\n          if ((columns.length === 1) && (columns[0] === columnName)) {\n            return;\n          } else {\n            if (!config.autoMigrateOldSchema) {\n              console.error(\n                'Database schema was not migrated. Please run ' +\n                '\"sequelize db:migrate:old_schema\" first.'\n              );\n              process.exit(1);\n            }\n\n            return tryToMigrateFromOldSchema();\n          }\n        });\n    });\n}\n\nfunction logMigrator (s) {\n  if (s.indexOf('Executing') !== 0) {\n    helpers.view.log(s);\n  }\n}\n\nfunction getSequelizeInstance () {\n  var config  = null;\n  var options = {};\n\n  try {\n    config = helpers.config.readConfig();\n  } catch (e) {\n    console.log(e.message);\n    process.exit(1);\n  }\n\n  _.forEach(config, function (value, key) {\n    if (['database', 'username', 'password'].indexOf(key) === -1) {\n      options[key] = value;\n    }\n\n    if (key === 'use_env_variable' && process.env[value]) {\n      var dbUrl = url.parse(process.env[value]);\n      var protocol = dbUrl.protocol.split(':')[0];\n\n      config.database = dbUrl.pathname.substring(1);\n\n      if (protocol === 'sqlite') {\n        options.storage = dbUrl.pathname;\n      } else if (dbUrl.auth) {\n        var authParts = dbUrl.auth.split(':');\n\n        config.username = authParts[0];\n\n        if (authParts.length > 1) {\n          config.password = authParts.slice(1).join(':');\n        }\n      }\n\n      options = _.assign(options, {\n        host: dbUrl.hostname,\n        port: dbUrl.port,\n        dialect: protocol,\n        protocol: protocol\n      });\n    }\n\n    if (key === 'dialectOptions') {\n      options = _.assign(options, {\n        dialectOptions: value\n      });\n    }\n  });\n\n  options = _.assign({ logging: logMigrator }, options);\n\n  try {\n    return new Sequelize(config.database, config.username, config.password, options);\n  } catch (e) {\n    console.warn(e);\n    throw e;\n  }\n}\n\nfunction getMigrator (type) {\n  if (helpers.config.configFileExists() || args.url) {\n    var sequelize = getSequelizeInstance();\n    var migrator  = new Umzug({\n      storage:        helpers.umzug.getStorage(type),\n      storageOptions: helpers.umzug.getStorageOptions(type, { sequelize: sequelize }),\n      logging:        console.log,\n      migrations:     {\n        params:  [ sequelize.getQueryInterface(), Sequelize ],\n        path:    helpers.path.getPath(type),\n        pattern: helpers.config.supportsCoffee() ? /\\.js$|\\.coffee$/ : /\\.js$/,\n        wrap:    function (fun) {\n          if (fun.length === 3) {\n            return Bluebird.promisify(fun);\n          } else {\n            return fun;\n          }\n        }\n      }\n    });\n\n    return sequelize\n    .authenticate()\n    .then(function () {\n      return migrator;\n    })\n    .catch(function (err) {\n      console.error('Unable to connect to database: ' + err);\n      process.exit(1);\n    });\n  } else {\n    console.log(\n      'Cannot find \"' + helpers.config.getConfigFile() +\n      '\". Have you run \"sequelize init\"?'\n    );\n    process.exit(1);\n  }\n}\n\n/**\n * tryToMigrateFromOldSchema - migrates from old schema\n *\n * @return {Promise}\n */\nfunction tryToMigrateFromOldSchema () {\n  var sequelize = getSequelizeInstance();\n  var queryInterface = sequelize.getQueryInterface();\n\n  return queryInterface.showAllTables()\n  .then(function (tableNames) {\n    if (tableNames.indexOf('SequelizeMeta') === -1) {\n      throw new Error('No SequelizeMeta table found.');\n    }\n  })\n  .then(function () {\n    return queryInterface.describeTable('SequelizeMeta');\n  })\n  .then(function (table) {\n    if (JSON.stringify(Object.keys(table).sort()) === JSON.stringify(['id', 'from', 'to'])) {\n      return;\n    }\n    return queryInterface.renameTable('SequelizeMeta', 'SequelizeMetaBackup')\n    .then(function () {\n      var sql = queryInterface.QueryGenerator.selectQuery('SequelizeMetaBackup');\n\n      return helpers.generic.execQuery(sequelize, sql, { type: 'SELECT', raw: true });\n    })\n    .then(function (result) {\n      var timestamps = result.map(function (item) {\n        return item.to;\n      });\n      var files      = fs.readdirSync(helpers.path.getPath('migration'));\n\n      return files.filter(function (file) {\n        var match = file.match(/(\\d+)-?/);\n\n        if (match) {\n          var timestamp = match[0].replace('-', '');\n\n          return timestamps.indexOf(timestamp) > -1;\n        }\n      });\n    })\n    .then(function (files) {\n      var SequelizeMeta = sequelize.define('SequelizeMeta', {\n        name: {\n          type: Sequelize.STRING,\n          allowNull: false,\n          unique: true,\n          primaryKey: true,\n          autoIncrement: false\n        }\n      }, {\n        tableName:  'SequelizeMeta',\n        timestamps: false\n      });\n\n      return SequelizeMeta.sync().then(function () {\n        return SequelizeMeta.bulkCreate(\n          files.map(function (file) {\n            return { name: file };\n          })\n        );\n      });\n    });\n  });\n}\n\n/**\n * ensureSeeds - checks that the `--seed` option exists\n */\n\nfunction ensureSeeds () {\n  if ( !args.seed ) {\n    helpers.view.error(\n      'Unspecified flag ' +\n      clc.blueBright('\"seed\"') +\n      '. Check the manual for further details.'\n    );\n    process.exit(1);\n  }\n\n  if ( !_.isArray(args.seed) ) {\n    args.seed = [args.seed];\n  }\n\n  args.seed.forEach(function (file, ind) {\n    args.seed[ind] = path.basename(file);\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/lib/tasks/init.js":"'use strict';\n\nvar path    = require('path');\nvar helpers = require(path.resolve(__dirname, '..', 'helpers'));\nvar args    = require('yargs').argv;\nvar clc     = require('cli-color');\nvar _       = require('lodash');\n\nmodule.exports = {\n  'init': {\n    descriptions: {\n      'short': 'Initializes the project.',\n      'long': (function () {\n        var result = [\n          'The command will initialize the current directory.',\n          'In detail this means, that you will find the following items afterwards:',\n          ''\n        ];\n\n        var items = {\n          'config': 'A folder that contains the config files.',\n          'config/config.json': 'A file that contains the configuration for the ORM.',\n          'migrations': 'A folder that contains the migration files.',\n          'seeders': 'A folder that contains the seed files.',\n          'models': 'A folder that contains the model files.',\n          'models/index.js': 'A file that can be required to load all the models.'\n        };\n\n        _.forEach(items, function (value, key) {\n          result.push([\n            clc.blueBright(helpers.view.pad(key, items)),\n            value\n          ].join(' '));\n        });\n\n        result = result.concat([\n          '',\n          'Most of the files and folders can be changed to fit custom folder structures.',\n          'Check the options for further information.'\n        ]);\n\n        return result;\n      })(),\n\n      options: {\n        '--force': 'Will drop the existing config folder and re-create it. ' +\n          clc.blueBright('Default: false')\n      }\n    },\n\n    dependencies: [\n      'init:config',\n      'init:migrations',\n      'init:seeders',\n      'init:models'\n    ],\n\n    task: function () {}\n  },\n\n  'init:config': {\n    descriptions: {\n      'short': 'Initializes the configuration.'\n    },\n\n    task: function () {\n      if (!helpers.config.configFileExists() || !!args.force) {\n        helpers.config.writeDefaultConfig();\n        console.log('Created \"' + helpers.config.relativeConfigFile() + '\"');\n      } else {\n        helpers.init.notifyAboutExistingFile(helpers.config.relativeConfigFile());\n        process.exit(1);\n      }\n    }\n  },\n\n  'init:models': {\n    descriptions: {\n      'short': 'Initializes the models.'\n    },\n\n    task: function () {\n      helpers.init.createModelsFolder(!!args.force);\n      helpers.init.createModelsIndexFile(!!args.force);\n    }\n  },\n\n  'init:migrations': {\n    descriptions: {\n      'short': 'Initializes the migrations.'\n    },\n\n    task: function () {\n      helpers.init.createMigrationsFolder(!!args.force);\n    }\n  },\n\n  'init:seeders': {\n    descriptions: {\n      'short': 'Initializes the seeders.'\n    },\n\n    task: function () {\n      helpers.init.createSeedersFolder(!!args.force);\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/lib/tasks/migration.js":"'use strict';\n\nvar path      = require('path');\nvar helpers   = require(path.resolve(__dirname, '..', 'helpers'));\nvar args      = require('yargs').argv;\nvar fs        = require('fs');\nvar clc       = require('cli-color');\n\nmodule.exports = {\n  'migration:create': {\n    descriptions: {\n      'short': 'Generates a new migration file.',\n      options: {\n        '--name': 'Defines the name of the migration. ' +\n          clc.blueBright('Default: unnamed-migration'),\n        '--underscored': 'Use snake case for the timestamp\\'s attribute names'\n      }\n    },\n\n    aliases: [ 'migration:generate' ],\n\n    task: function () {\n      var config   = null;\n\n      helpers.init.createMigrationsFolder();\n\n      try {\n        config = helpers.config.readConfig();\n      } catch (e) {\n        console.log(e.message);\n        process.exit(1);\n      }\n\n      fs.writeFileSync(\n        helpers.path.getMigrationPath(args.name),\n        helpers.template.render('migrations/skeleton.js', {}, {\n          beautify: false\n        })\n      );\n\n      helpers.view.log(\n        'New migration was created at',\n        clc.blueBright(helpers.path.getMigrationPath(args.name)),\n        '.'\n      );\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/lib/tasks/model.js":"'use strict';\n\nvar path    = require('path');\nvar helpers = require(path.resolve(__dirname, '..', 'helpers'));\nvar args    = require('yargs').argv;\nvar clc     = require('cli-color');\n\nmodule.exports = {\n  'model:create': {\n    aliases: [ 'model:generate' ],\n\n    descriptions: {\n      'short': 'Generates a model and its migration.',\n\n      'long': function () {\n        var migrationFileName = helpers.path.getFileName(\n          'migration',\n          helpers.migration.generateMigrationName({ name: 'User' }),\n          { ignoreConfig: true }\n        );\n\n        var result = [\n          'This task generates a model file and its respective migration.',\n          'It is necessary to specify the name of the new model as well as',\n          'the model\\'s attributes.',\n          '',\n          'The attributes can be specified as in the following (and semantically equal) examples:',\n          '',\n          'sequelize model:create --name User --attributes ' +\n            'first_name:string,last_name:string,bio:text',\n          'sequelize model:create --name User --attributes ' +\n            '\\'first_name:string last_name:string bio:text\\'',\n          'sequelize model:create --name User --attributes ' +\n            '\\'first_name:string, last_name:string, bio:text\\'',\n          '',\n          'This command will generate a new migration and model definition:',\n          '',\n          '// the model file',\n          '// located under models/user.js'\n        ];\n\n        result = result.concat(\n          helpers.model.generateFileContent({\n            name: 'User',\n            attributes: 'first_name:string,last_name:string,bio:text'\n          }).split('\\n')\n        );\n\n        result = result.concat([\n          '',\n          '// the migration file',\n          '// located under migrations/' + migrationFileName\n        ]);\n\n        result = result.concat(\n          helpers.migration.generateTableCreationFileContent({\n            name: 'User',\n            attributes: 'first_name:string,last_name:string,bio:text',\n            underscored: args.underscored\n          }).split('\\n')\n        );\n\n        return result;\n      },\n\n      options: {\n        '--name': 'The name of the new model.',\n        '--attributes': 'A list of attributes.',\n        '--underscored': 'Set timestamps to snake_case'\n      }\n    },\n\n    preChecks: [\n      function ensureAttributesFlag () {\n        if (!args.attributes) {\n          helpers.view.error(\n            'Unspecified flag ' +\n            clc.blueBright('\"attributes\"') +\n            '. Check the manual for further details.'\n          );\n          process.exit(1);\n        }\n      },\n\n      function ensureNameFlag () {\n        if (!args.name) {\n          helpers.view.error(\n            'Unspecified flag ' + clc.blueBright('\"name\"') +\n            '. Check the manual for further details.'\n          );\n          process.exit(1);\n        }\n      },\n\n      function ensureModelsFolder () {\n        if (!helpers.path.existsSync(helpers.path.getModelsPath())) {\n          helpers.view.error(\n            'Unable to find models path (' +\n            helpers.path.getModelsPath() +\n            '). Did you run ' + clc.blueBright('sequelize init') + '?'\n          );\n          process.exit(1);\n        }\n      },\n\n      function ensureMigrationsFolder () {\n        if (!helpers.path.existsSync(helpers.path.getPath('migration'))) {\n          helpers.view.error(\n            'Unable to find migrations path (' +\n            helpers.path.getPath('migration') +\n            '). Did you run ' + clc.blueBright('sequelize init') + '?'\n          );\n          process.exit(1);\n        }\n      },\n\n      function checkModelFileExistence () {\n        var modelPath = helpers.path.getModelPath(args.name);\n\n        if (!args.force && helpers.model.modelFileExists(modelPath)) {\n          helpers.model.notifyAboutExistingFile(modelPath);\n          process.exit(1);\n        }\n      }\n    ],\n\n    task: function () {\n      this.preChecks.forEach(function (preCheck) {\n        preCheck();\n      });\n\n      helpers.model.generateFile(args);\n      helpers.migration.generateTableCreationFile(args);\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/lib/tasks/seed.js":"'use strict';\n\nvar path      = require('path');\nvar helpers   = require(path.resolve(__dirname, '..', 'helpers'));\nvar args      = require('yargs').argv;\nvar fs        = require('fs');\nvar clc       = require('cli-color');\n\nmodule.exports = {\n  'seed:create': {\n    descriptions: {\n      'short': 'Generates a new seed file.',\n      options: {\n        '--name': 'Defines the name of the seed. ' +\n          clc.blueBright('Default: unnamed-seed')\n      }\n    },\n\n    aliases: [ 'seed:generate' ],\n\n    task: function () {\n      var config   = null;\n\n      helpers.init.createSeedersFolder();\n\n      try {\n        config = helpers.config.readConfig();\n      } catch (e) {\n        console.log(e.message);\n        process.exit(1);\n      }\n\n      fs.writeFileSync(\n        helpers.path.getSeederPath(args.name),\n        helpers.template.render('seeders/skeleton.js', {}, {\n          beautify: false\n        })\n      );\n\n      helpers.view.log(\n        'New seed was created at',\n        clc.blueBright(helpers.path.getSeederPath(args.name)),\n        '.'\n      );\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sequelize-cli/node_modules/sequelize-cli/lib/tasks/version.js":"'use strict';\n\nmodule.exports = {\n  'version': {\n    descriptions: {\n      'short': 'Prints the version number.',\n      'long': [ 'Prints the version number.' ]\n    },\n\n    aliases: [ 'v' ],\n\n    task: function () {\n    }\n  }\n};\n"}